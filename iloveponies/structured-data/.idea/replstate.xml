<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1458066042032">{:repl-history {:ide [], :local [&quot;(contains-point? (rectangle [0 0] [2 2]) (point -3 1))&quot; &quot;(contains-point? (rectangle [0 0] [2 2]) (point 1 1))&quot; &quot;(contains-point? (rectangle [1 1] [2 2]) (point 1 1))&quot; &quot;(contains-rectangle? (rectangle [0 0] [3 3])\n                     (rectangle [1 1] [2 2]))&quot; &quot;(contains-rectangle? (rectangle [0 0] [2 2])\n                     (rectangle [1 1] [3 3]))&quot; &quot;(contains-rectangle? (rectangle [0 0] [1 1])\n                     (rectangle [1 1] [3 3]))&quot; &quot;(contains-rectangle? (rectangle [0 0] [1 1])\n                     (rectangle [0 0] [1 1]))&quot; &quot;(title-length cities)&quot; &quot;(title-length wild-seed\n              )&quot; &quot;(title-length little-schemer\n              )&quot; &quot;(author-count cities)&quot; &quot;(author-count little-schemer\n              )&quot; &quot;(author-count wild-seed)&quot; &quot;(multiple-authors? little-schemer\n                   )&quot; &quot;(multiple-authors? embassytown)&quot; &quot;(add-author little-schemer {:name \&quot;Gerald J. Sussman\&quot;})&quot; &quot;(add-author {:authors [{:name \&quot;Juhana\&quot;}]} {:name \&quot;Jani\&quot;})&quot; &quot;(contains? octavia :death_year)&quot; &quot;(alive? octavia)&quot; &quot;(alive? china)&quot; &quot;(stars 5)&quot; &quot;(stars 1)&quot; &quot;(stars 7)&quot; &quot;(stars 3)&quot; &quot;(monotonic? [1 2 3])&quot; &quot;(monotonic? [0 1 10])&quot; &quot;(monotonic? [3 2 0 -3 ])&quot; &quot;(monotonic? [3 2 0 -3])&quot; &quot;(monotonic? [3 2 2])&quot; &quot;(monotonic? [1 2 1 0])&quot; &quot;(toggle :d {:a :b :c})&quot; &quot;(toggle {:a :b :c} :d)&quot; &quot;(toggle #{:a :b :c} :d)&quot; &quot;(toggle #{:a :b :c :d} :d)&quot; &quot;(contains-duplicates? [ 1 1 2 3 -40])&quot; &quot;(contains-duplicates? [ 1 2 3 -40])&quot; &quot;(set [1 1 2 3 -40])&quot; &quot;#{1 1 2 3 -40}&quot; &quot;[1 1 2 3 -40]&quot; &quot;(= (set [1 1 2 3 -40]) [1 1 2 3 -40])&quot; &quot;(contains-duplicates? [1 1 2 3 -40])&quot; &quot;(= (set [1 2 3 -40]) [1 2 3 -40])&quot; &quot;(contains-duplicates? [1 2 3 -40])&quot; &quot;(contains-duplicates? [1 2 3 -40])(contains-duplicates? [1 2 3 \&quot;a\&quot; \&quot;a\&quot;])&quot; &quot;(conj [china, octavia])&quot; &quot;(conj [china, octavia] friedman)&quot; &quot;(assoc [china, octavia] friedman)&quot; &quot;(assoc [1 2 3 4] 5)&quot; &quot;(assoc [1 2 3 4] 5 6\n                 )&quot; &quot;(assoc book :authors (set [octavia, felleisen]))&quot; &quot;(assoc little-schemer :authors (set [friedman, felleisen]))&quot; &quot;(contains? (:authors cities) {:birth-year 1972, :name \&quot;China Miéville\&quot;}})&quot; &quot;(contains? (:authors cities) {:birth-year 1972, :name \&quot;China Miéville\&quot;})&quot; &quot;(= china {:birth-year 1972, :name \&quot;China Miéville\&quot;})&quot; &quot;  china&quot; &quot;(old-book-&gt;new-book cities)&quot; &quot;(contains? (:author cities) china)&quot; &quot;(:author cities)&quot; &quot;cities&quot; &quot;(contains? (:authors cities) china)&quot; &quot;(:authors cities)&quot; &quot;(contains (:authors (old-book-&gt;new-book cities)) china)&quot; &quot;(contains? (:authors (old-book-&gt;new-book cities)) china)&quot; &quot;(contains? (:authors (old-book-&gt;new-book cities) felleisen))&quot; &quot;(contains? (:authors (old-book-&gt;new-book cities)) felleisen)&quot; &quot;(has-author? cities china)&quot; &quot;(has-author? cities felleisen)&quot; &quot;(has-author? little-schemer felleisen)&quot; &quot;(has-author? little-schemer friedman)&quot; &quot;(has-author? little-schemer octavia)&quot; &quot;(map :authors [cities, wild-seed])&quot; &quot;(apply clojure.set/union (map :authors [cities, wild-seed]))&quot; &quot;(authors [cities, wild-seed])&quot; &quot;(authors [little-schemer, cities])&quot; &quot;(authors books)&quot; &quot;(map :name (authors books))&quot; &quot;(set (map :name (authors books)))&quot; &quot;(all-author-names books)&quot; &quot;(all-author-names [cities, wild-seed])&quot; &quot;(all-author-names [])&quot; &quot;china&quot; &quot;felleisen&quot; &quot;(:name felleisen)&quot; &quot;(:birth-year felleisen\n  )&quot; &quot;(:birth-year felleisen)&quot; &quot;(str nil)&quot; &quot;(author-&gt;string felleisen)&quot; &quot;(author-&gt;string felleisen\n                )&quot; &quot;(author-&gt;string friedman)&quot; &quot;(author-&gt;string octavia)&quot; &quot;(defn author-&gt;string [author]\n  (let [name (:name author)\n        years (str \&quot; (\&quot; (:birth-year author) \&quot; - \&quot; (:death-year author) \&quot;)\&quot;)\n        ]\n    (str name (if (:birth-year author) years \&quot;\&quot;))))&quot; &quot;authors&quot; &quot;(defn authors-&gt;string [authors]\n  :-)&quot; &quot;books&quot; &quot;(range 10)&quot; &quot;(filter even?\n        (range 10))&quot; &quot;(take 2 )&quot; &quot;(take 2\n      (filter even?\n              (range 10)))&quot; &quot;*ns*&quot; &quot;(doc take)&quot; &quot;(user/doc take)&quot;], :remote []}}</component>
</project>